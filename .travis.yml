dist: trusty
sudo: false
language: c # We need this, so 'compiler' -field would create two jobs!

# Build only master (and PRs to master)
branches:
  only:
  - master

# Because we have to make some sed magic
git:
  submodules: false

# Caching so the next build will be fast too.
cache:
  directories:
  - $HOME/.stack
  - $HOME/.local/bin
  - .stack-work/

before_cache:
- rm -rf $(stack --no-terminal --system-ghc --skip-ghc-check path --local-install-root)/bin/*

# APT dependencies
addons:
  apt:
    sources:
    - hvr-ghc
    packages:
    - libfftw3-dev
    - alex-3.1.7
    - happy-1.19.5
    - ghc-7.10.3
    - ghc-8.0.2
    - libgmp-dev

# we build with multiple compilers
compiler:
- ghc-7.10.3
- ghc-8.0.2

before_install:
# Variables
- HC=$CC
- unset CC
- export STACK_YAML=stack-$HC.yaml
- GHCVER=$(echo $HC|sed 's/ghc-//')
- echo $GHCVER $STACK_YAML
# job starting moment
- JOB_START_TIME=$(date +%s)
# git submodules
- sed -i 's/git@github.com:/https:\/\/github.com\//' .gitmodules
- git submodule update --init
# path
- export PATH=/opt/alex/3.1.7/bin:/opt/happy/1.19.5/bin:$PATH
- export PATH=/opt/ghc/$GHCVER/bin:$PATH
# Download and unpack the stack executable
- mkdir -p ~/.local/bin
- export PATH=$HOME/.local/bin:$PATH
- if [ ! -e ~/.local/bin/stack ]; then
    travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack';
    travis_retry curl -L http://oleg.fi/stack.xz | xz -d > ~/.local/bin/stack;
  fi
# Version infos
- stack +RTS -N1 -RTS --version
- ghc --version

# Disable hardening
# https://ghc.haskell.org/trac/ghc/ticket/9007
# https://wiki.debian.org/Hardening
- DEB_BUILD_MAINT_OPTIONS=hardening=-all
- dpkg-buildflags --get LDFLAGS
- dpkg-buildflags --get CFLAGS

install:
- echo "Nothing to do".

jobs:
  include:
    - stage: "dependencies 1"
      script:
        - JOB_CURR_TIME=$(date +%s)
        - JOB_DURR=$((JOB_START_TIME + 2400 - JOB_CURR_TIME))
        - echo time to run $JOB_DURR
        - timeout $JOB_DURR stack +RTS -N2 -RTS --no-terminal --system-ghc --skip-ghc-check build --test --only-dependencies -j2 --ghc-options="-j2 +RTS -M1.5G -A128M -n4m -RTS" futurice-prelude || true;
    - stage: "dependencies 2"
      script:
        - JOB_CURR_TIME=$(date +%s)
        - JOB_DURR=$((JOB_START_TIME + 2400 - JOB_CURR_TIME))
        - echo time to run $JOB_DURR
        - timeout $JOB_DURR stack +RTS -N2 -RTS --no-terminal --system-ghc --skip-ghc-check build --test --only-dependencies -j2 --ghc-options="-j2 +RTS -M1.5G -A128M -n4m -RTS" servant-Chart || true;

    - stage: "dependencies 3"
      script:
        JOB_CURR_TIME=$(date +%s)
        JOB_DURR=$((JOB_START_TIME + 2400 - JOB_CURR_TIME))
        echo time to run $JOB_DURR
        timeout $JOB_DURR stack +RTS -N2 -RTS --no-terminal --system-ghc --skip-ghc-check build --test --only-dependencies -j2 --ghc-options="-j2 +RTS -M1.5G -A128M -n4m -RTS" || true;

    - stage: "build"
      script:
        - if [ "$PEDANTIC" = "YES" ]; then export STACKOPTS=--pedantic; fi
        - JOB_CURR_TIME=$(date +%s)
        - JOB_DURR=$((JOB_START_TIME + 2400 - JOB_CURR_TIME))
        - echo time to run $JOB_DURR
        - if [ $JOB_DURR -lt 60 ]; then echo "Less then minute to go"; JOB_DURR=1; fi
        - timeout $JOB_DURR stack +RTS -N2 -RTS --no-terminal --system-ghc --skip-ghc-check build --test $STACKOPTS -j1 --ghc-options="-j2 +RTS -M2G -A128M -n4m -RTS"
