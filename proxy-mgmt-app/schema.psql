-- CREATE SCHEMA proxyapp;

CREATE TABLE proxyapp.credentials (
  username TEXT PRIMARY KEY,
  passtext TEXT, -- if null it's disabled
  createdby TEXT NOT NULL,
  createdat TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE proxyapp.accesslog (
  username TEXT NOT NULL references proxyapp.credentials(username),
  updated TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
  endpoint TEXT NOT NULL
);

CREATE EXTENSION pgcrypto;

CREATE FUNCTION pass_crypt() RETURNS trigger AS $pass_crypt$
  BEGIN-- If given passtext is non-empty, encrypt it
    IF NEW.passtext IS NOT NULL AND NEW.passtext NOT LIKE '' THEN
      NEW.passtext = crypt(NEW.passtext, gen_salt('md5'));
    END IF;

    RETURN NEW;
  END;
 $pass_crypt$ LANGUAGE plpgsql;

CREATE TRIGGER pass_crypt BEFORE INSERT OR UPDATE ON proxyapp.credentials
  FOR EACH ROW EXECUTE PROCEDURE pass_crypt();
